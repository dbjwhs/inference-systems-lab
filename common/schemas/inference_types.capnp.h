// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: inference_types.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1002000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(80b405f17e533dea);
CAPNP_DECLARE_SCHEMA(9afe8fbade87ebdb);
CAPNP_DECLARE_SCHEMA(a16b63ee615a7fcb);
CAPNP_DECLARE_SCHEMA(c040bdc6a0bb3f28);
enum class MigrationStrategy_c040bdc6a0bb3f28: uint16_t {
  DIRECT_MAPPING,
  TRANSFORMATION,
  DEFAULT_VALUES,
  CUSTOM_LOGIC,
  LOSSY,
};
CAPNP_DECLARE_ENUM(MigrationStrategy, c040bdc6a0bb3f28);
CAPNP_DECLARE_SCHEMA(d3bd47cdc4430d54);
CAPNP_DECLARE_SCHEMA(e4a485ea32101469);
CAPNP_DECLARE_SCHEMA(e2ff137a748e0bae);
CAPNP_DECLARE_SCHEMA(be959e632be6af3e);
CAPNP_DECLARE_SCHEMA(b2c44a5e79f769d5);
CAPNP_DECLARE_SCHEMA(c4ab0c3f04f1a2ad);
CAPNP_DECLARE_SCHEMA(c101812a0b08c4f7);
CAPNP_DECLARE_SCHEMA(a11f86641fbd5a0d);
enum class QueryType_a11f86641fbd5a0d: uint16_t {
  FIND_ALL,
  PROVE,
  FIND_FIRST,
  EXPLAIN,
};
CAPNP_DECLARE_ENUM(QueryType, a11f86641fbd5a0d);
CAPNP_DECLARE_SCHEMA(cddb5b508440cc12);
CAPNP_DECLARE_SCHEMA(9a687b076b5f07de);
CAPNP_DECLARE_SCHEMA(fa2f301bbd210760);
CAPNP_DECLARE_SCHEMA(cd9eb8b5a2e38166);
CAPNP_DECLARE_SCHEMA(9049ff3f6a3a6f4a);
CAPNP_DECLARE_SCHEMA(f3ba904e52dccc01);
CAPNP_DECLARE_SCHEMA(af32d752cbbf2a06);
enum class CompressionAlgorithm_af32d752cbbf2a06: uint16_t {
  NONE,
  GZIP,
  LZ4,
  ZSTD,
};
CAPNP_DECLARE_ENUM(CompressionAlgorithm, af32d752cbbf2a06);
CAPNP_DECLARE_SCHEMA(be77fc3e30897a20);
CAPNP_DECLARE_SCHEMA(89fccd4524d6afce);
CAPNP_DECLARE_SCHEMA(e6e754443887b170);
enum class FieldMappingType_e6e754443887b170: uint16_t {
  DIRECT,
  RENAMED,
  SPLIT,
  MERGED,
  TRANSFORMED,
  DEPRECATED,
};
CAPNP_DECLARE_ENUM(FieldMappingType, e6e754443887b170);
CAPNP_DECLARE_SCHEMA(d9843c6691f738dd);
CAPNP_DECLARE_SCHEMA(aaa74bc28ec1c5c0);
CAPNP_DECLARE_SCHEMA(8c17012e7393fffa);
CAPNP_DECLARE_SCHEMA(c64639c9821d3e2b);
CAPNP_DECLARE_SCHEMA(8e0d5f2342c1116a);
enum class CompatibilityLevel_8e0d5f2342c1116a: uint16_t {
  FULL_COMPATIBLE,
  FORWARD_COMPATIBLE,
  BACKWARD_COMPATIBLE,
  MIGRATION_REQUIRED,
  INCOMPATIBLE,
};
CAPNP_DECLARE_ENUM(CompatibilityLevel, 8e0d5f2342c1116a);

}  // namespace schemas
}  // namespace capnp

namespace inference_lab {
namespace common {
namespace schemas {

struct SchemaVersion {
  SchemaVersion() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(80b405f17e533dea, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SchemaEvolution {
  SchemaEvolution() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9afe8fbade87ebdb, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MigrationPath {
  MigrationPath() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a16b63ee615a7fcb, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::MigrationStrategy_c040bdc6a0bb3f28 MigrationStrategy;

struct Value {
  Value() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    INT64_VALUE,
    FLOAT64_VALUE,
    TEXT_VALUE,
    BOOL_VALUE,
    LIST_VALUE,
    STRUCT_VALUE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d3bd47cdc4430d54, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Field {
  Field() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e4a485ea32101469, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Fact {
  Fact() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e2ff137a748e0bae, 3, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Rule {
  Rule() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(be959e632be6af3e, 3, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Condition {
  Condition() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b2c44a5e79f769d5, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Conclusion {
  Conclusion() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c4ab0c3f04f1a2ad, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Query {
  Query() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c101812a0b08c4f7, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::QueryType_a11f86641fbd5a0d QueryType;

struct QueryResult {
  QueryResult() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cddb5b508440cc12, 4, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Result {
  Result() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9a687b076b5f07de, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Binding {
  Binding() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fa2f301bbd210760, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ProofStep {
  ProofStep() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cd9eb8b5a2e38166, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct KnowledgeBase {
  KnowledgeBase() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9049ff3f6a3a6f4a, 3, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CompressionInfo {
  CompressionInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f3ba904e52dccc01, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::CompressionAlgorithm_af32d752cbbf2a06 CompressionAlgorithm;

struct CompatibilityLayer {
  CompatibilityLayer() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(be77fc3e30897a20, 0, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FieldMapping {
  FieldMapping() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(89fccd4524d6afce, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::FieldMappingType_e6e754443887b170 FieldMappingType;

struct DefaultValue {
  DefaultValue() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d9843c6691f738dd, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TransformationRule {
  TransformationRule() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aaa74bc28ec1c5c0, 2, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CompatibilityMatrix {
  CompatibilityMatrix() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8c17012e7393fffa, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CompatibilityEntry {
  CompatibilityEntry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c64639c9821d3e2b, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::CompatibilityLevel_8e0d5f2342c1116a CompatibilityLevel;

// =======================================================================================

class SchemaVersion::Reader {
public:
  typedef SchemaVersion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getMajor() const;

  inline  ::uint32_t getMinor() const;

  inline  ::uint32_t getPatch() const;

  inline bool hasVersionString() const;
  inline  ::capnp::Text::Reader getVersionString() const;

  inline  ::uint32_t getMinCompatibleMajor() const;

  inline  ::uint32_t getMinCompatibleMinor() const;

  inline bool hasSchemaHash() const;
  inline  ::capnp::Text::Reader getSchemaHash() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SchemaVersion::Builder {
public:
  typedef SchemaVersion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getMajor();
  inline void setMajor( ::uint32_t value);

  inline  ::uint32_t getMinor();
  inline void setMinor( ::uint32_t value);

  inline  ::uint32_t getPatch();
  inline void setPatch( ::uint32_t value);

  inline bool hasVersionString();
  inline  ::capnp::Text::Builder getVersionString();
  inline void setVersionString( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVersionString(unsigned int size);
  inline void adoptVersionString(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVersionString();

  inline  ::uint32_t getMinCompatibleMajor();
  inline void setMinCompatibleMajor( ::uint32_t value);

  inline  ::uint32_t getMinCompatibleMinor();
  inline void setMinCompatibleMinor( ::uint32_t value);

  inline bool hasSchemaHash();
  inline  ::capnp::Text::Builder getSchemaHash();
  inline void setSchemaHash( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSchemaHash(unsigned int size);
  inline void adoptSchemaHash(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSchemaHash();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SchemaVersion::Pipeline {
public:
  typedef SchemaVersion Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SchemaEvolution::Reader {
public:
  typedef SchemaEvolution Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCurrentVersion() const;
  inline  ::inference_lab::common::schemas::SchemaVersion::Reader getCurrentVersion() const;

  inline bool hasSupportedVersions() const;
  inline  ::capnp::List< ::inference_lab::common::schemas::SchemaVersion,  ::capnp::Kind::STRUCT>::Reader getSupportedVersions() const;

  inline bool hasMigrationPaths() const;
  inline  ::capnp::List< ::inference_lab::common::schemas::MigrationPath,  ::capnp::Kind::STRUCT>::Reader getMigrationPaths() const;

  inline  ::uint64_t getEvolutionTimestamp() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SchemaEvolution::Builder {
public:
  typedef SchemaEvolution Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCurrentVersion();
  inline  ::inference_lab::common::schemas::SchemaVersion::Builder getCurrentVersion();
  inline void setCurrentVersion( ::inference_lab::common::schemas::SchemaVersion::Reader value);
  inline  ::inference_lab::common::schemas::SchemaVersion::Builder initCurrentVersion();
  inline void adoptCurrentVersion(::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion>&& value);
  inline ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion> disownCurrentVersion();

  inline bool hasSupportedVersions();
  inline  ::capnp::List< ::inference_lab::common::schemas::SchemaVersion,  ::capnp::Kind::STRUCT>::Builder getSupportedVersions();
  inline void setSupportedVersions( ::capnp::List< ::inference_lab::common::schemas::SchemaVersion,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::inference_lab::common::schemas::SchemaVersion,  ::capnp::Kind::STRUCT>::Builder initSupportedVersions(unsigned int size);
  inline void adoptSupportedVersions(::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::SchemaVersion,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::SchemaVersion,  ::capnp::Kind::STRUCT>> disownSupportedVersions();

  inline bool hasMigrationPaths();
  inline  ::capnp::List< ::inference_lab::common::schemas::MigrationPath,  ::capnp::Kind::STRUCT>::Builder getMigrationPaths();
  inline void setMigrationPaths( ::capnp::List< ::inference_lab::common::schemas::MigrationPath,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::inference_lab::common::schemas::MigrationPath,  ::capnp::Kind::STRUCT>::Builder initMigrationPaths(unsigned int size);
  inline void adoptMigrationPaths(::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::MigrationPath,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::MigrationPath,  ::capnp::Kind::STRUCT>> disownMigrationPaths();

  inline  ::uint64_t getEvolutionTimestamp();
  inline void setEvolutionTimestamp( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SchemaEvolution::Pipeline {
public:
  typedef SchemaEvolution Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::inference_lab::common::schemas::SchemaVersion::Pipeline getCurrentVersion();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MigrationPath::Reader {
public:
  typedef MigrationPath Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFromVersion() const;
  inline  ::inference_lab::common::schemas::SchemaVersion::Reader getFromVersion() const;

  inline bool hasToVersion() const;
  inline  ::inference_lab::common::schemas::SchemaVersion::Reader getToVersion() const;

  inline  ::inference_lab::common::schemas::MigrationStrategy getStrategy() const;

  inline bool getReversible() const;

  inline bool hasDescription() const;
  inline  ::capnp::Text::Reader getDescription() const;

  inline bool hasWarnings() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getWarnings() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MigrationPath::Builder {
public:
  typedef MigrationPath Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFromVersion();
  inline  ::inference_lab::common::schemas::SchemaVersion::Builder getFromVersion();
  inline void setFromVersion( ::inference_lab::common::schemas::SchemaVersion::Reader value);
  inline  ::inference_lab::common::schemas::SchemaVersion::Builder initFromVersion();
  inline void adoptFromVersion(::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion>&& value);
  inline ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion> disownFromVersion();

  inline bool hasToVersion();
  inline  ::inference_lab::common::schemas::SchemaVersion::Builder getToVersion();
  inline void setToVersion( ::inference_lab::common::schemas::SchemaVersion::Reader value);
  inline  ::inference_lab::common::schemas::SchemaVersion::Builder initToVersion();
  inline void adoptToVersion(::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion>&& value);
  inline ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion> disownToVersion();

  inline  ::inference_lab::common::schemas::MigrationStrategy getStrategy();
  inline void setStrategy( ::inference_lab::common::schemas::MigrationStrategy value);

  inline bool getReversible();
  inline void setReversible(bool value);

  inline bool hasDescription();
  inline  ::capnp::Text::Builder getDescription();
  inline void setDescription( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDescription(unsigned int size);
  inline void adoptDescription(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDescription();

  inline bool hasWarnings();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getWarnings();
  inline void setWarnings( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setWarnings(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initWarnings(unsigned int size);
  inline void adoptWarnings(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownWarnings();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MigrationPath::Pipeline {
public:
  typedef MigrationPath Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::inference_lab::common::schemas::SchemaVersion::Pipeline getFromVersion();
  inline  ::inference_lab::common::schemas::SchemaVersion::Pipeline getToVersion();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Value::Reader {
public:
  typedef Value Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isInt64Value() const;
  inline  ::int64_t getInt64Value() const;

  inline bool isFloat64Value() const;
  inline double getFloat64Value() const;

  inline bool isTextValue() const;
  inline bool hasTextValue() const;
  inline  ::capnp::Text::Reader getTextValue() const;

  inline bool isBoolValue() const;
  inline bool getBoolValue() const;

  inline bool isListValue() const;
  inline bool hasListValue() const;
  inline  ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Reader getListValue() const;

  inline bool isStructValue() const;
  inline bool hasStructValue() const;
  inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Reader getStructValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Value::Builder {
public:
  typedef Value Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isInt64Value();
  inline  ::int64_t getInt64Value();
  inline void setInt64Value( ::int64_t value);

  inline bool isFloat64Value();
  inline double getFloat64Value();
  inline void setFloat64Value(double value);

  inline bool isTextValue();
  inline bool hasTextValue();
  inline  ::capnp::Text::Builder getTextValue();
  inline void setTextValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTextValue(unsigned int size);
  inline void adoptTextValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTextValue();

  inline bool isBoolValue();
  inline bool getBoolValue();
  inline void setBoolValue(bool value);

  inline bool isListValue();
  inline bool hasListValue();
  inline  ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Builder getListValue();
  inline void setListValue( ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Builder initListValue(unsigned int size);
  inline void adoptListValue(::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>> disownListValue();

  inline bool isStructValue();
  inline bool hasStructValue();
  inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Builder getStructValue();
  inline void setStructValue( ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Builder initStructValue(unsigned int size);
  inline void adoptStructValue(::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>> disownStructValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Value::Pipeline {
public:
  typedef Value Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Field::Reader {
public:
  typedef Field Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasValue() const;
  inline  ::inference_lab::common::schemas::Value::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Field::Builder {
public:
  typedef Field Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasValue();
  inline  ::inference_lab::common::schemas::Value::Builder getValue();
  inline void setValue( ::inference_lab::common::schemas::Value::Reader value);
  inline  ::inference_lab::common::schemas::Value::Builder initValue();
  inline void adoptValue(::capnp::Orphan< ::inference_lab::common::schemas::Value>&& value);
  inline ::capnp::Orphan< ::inference_lab::common::schemas::Value> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Field::Pipeline {
public:
  typedef Field Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::inference_lab::common::schemas::Value::Pipeline getValue();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Fact::Reader {
public:
  typedef Fact Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline bool hasPredicate() const;
  inline  ::capnp::Text::Reader getPredicate() const;

  inline bool hasArgs() const;
  inline  ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Reader getArgs() const;

  inline double getConfidence() const;

  inline  ::uint64_t getTimestamp() const;

  inline bool hasMetadata() const;
  inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Reader getMetadata() const;

  inline bool hasSchemaVersion() const;
  inline  ::inference_lab::common::schemas::SchemaVersion::Reader getSchemaVersion() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Fact::Builder {
public:
  typedef Fact Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline bool hasPredicate();
  inline  ::capnp::Text::Builder getPredicate();
  inline void setPredicate( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPredicate(unsigned int size);
  inline void adoptPredicate(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPredicate();

  inline bool hasArgs();
  inline  ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Builder getArgs();
  inline void setArgs( ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Builder initArgs(unsigned int size);
  inline void adoptArgs(::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>> disownArgs();

  inline double getConfidence();
  inline void setConfidence(double value);

  inline  ::uint64_t getTimestamp();
  inline void setTimestamp( ::uint64_t value);

  inline bool hasMetadata();
  inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Builder getMetadata();
  inline void setMetadata( ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Builder initMetadata(unsigned int size);
  inline void adoptMetadata(::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>> disownMetadata();

  inline bool hasSchemaVersion();
  inline  ::inference_lab::common::schemas::SchemaVersion::Builder getSchemaVersion();
  inline void setSchemaVersion( ::inference_lab::common::schemas::SchemaVersion::Reader value);
  inline  ::inference_lab::common::schemas::SchemaVersion::Builder initSchemaVersion();
  inline void adoptSchemaVersion(::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion>&& value);
  inline ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion> disownSchemaVersion();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Fact::Pipeline {
public:
  typedef Fact Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::inference_lab::common::schemas::SchemaVersion::Pipeline getSchemaVersion();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Rule::Reader {
public:
  typedef Rule Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasConditions() const;
  inline  ::capnp::List< ::inference_lab::common::schemas::Condition,  ::capnp::Kind::STRUCT>::Reader getConditions() const;

  inline bool hasConclusions() const;
  inline  ::capnp::List< ::inference_lab::common::schemas::Conclusion,  ::capnp::Kind::STRUCT>::Reader getConclusions() const;

  inline  ::int32_t getPriority() const;

  inline double getConfidence() const;

  inline bool hasMetadata() const;
  inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Reader getMetadata() const;

  inline bool hasSchemaVersion() const;
  inline  ::inference_lab::common::schemas::SchemaVersion::Reader getSchemaVersion() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Rule::Builder {
public:
  typedef Rule Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasConditions();
  inline  ::capnp::List< ::inference_lab::common::schemas::Condition,  ::capnp::Kind::STRUCT>::Builder getConditions();
  inline void setConditions( ::capnp::List< ::inference_lab::common::schemas::Condition,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::inference_lab::common::schemas::Condition,  ::capnp::Kind::STRUCT>::Builder initConditions(unsigned int size);
  inline void adoptConditions(::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Condition,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Condition,  ::capnp::Kind::STRUCT>> disownConditions();

  inline bool hasConclusions();
  inline  ::capnp::List< ::inference_lab::common::schemas::Conclusion,  ::capnp::Kind::STRUCT>::Builder getConclusions();
  inline void setConclusions( ::capnp::List< ::inference_lab::common::schemas::Conclusion,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::inference_lab::common::schemas::Conclusion,  ::capnp::Kind::STRUCT>::Builder initConclusions(unsigned int size);
  inline void adoptConclusions(::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Conclusion,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Conclusion,  ::capnp::Kind::STRUCT>> disownConclusions();

  inline  ::int32_t getPriority();
  inline void setPriority( ::int32_t value);

  inline double getConfidence();
  inline void setConfidence(double value);

  inline bool hasMetadata();
  inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Builder getMetadata();
  inline void setMetadata( ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Builder initMetadata(unsigned int size);
  inline void adoptMetadata(::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>> disownMetadata();

  inline bool hasSchemaVersion();
  inline  ::inference_lab::common::schemas::SchemaVersion::Builder getSchemaVersion();
  inline void setSchemaVersion( ::inference_lab::common::schemas::SchemaVersion::Reader value);
  inline  ::inference_lab::common::schemas::SchemaVersion::Builder initSchemaVersion();
  inline void adoptSchemaVersion(::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion>&& value);
  inline ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion> disownSchemaVersion();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Rule::Pipeline {
public:
  typedef Rule Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::inference_lab::common::schemas::SchemaVersion::Pipeline getSchemaVersion();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Condition::Reader {
public:
  typedef Condition Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPredicate() const;
  inline  ::capnp::Text::Reader getPredicate() const;

  inline bool hasArgs() const;
  inline  ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Reader getArgs() const;

  inline bool getNegated() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Condition::Builder {
public:
  typedef Condition Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPredicate();
  inline  ::capnp::Text::Builder getPredicate();
  inline void setPredicate( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPredicate(unsigned int size);
  inline void adoptPredicate(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPredicate();

  inline bool hasArgs();
  inline  ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Builder getArgs();
  inline void setArgs( ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Builder initArgs(unsigned int size);
  inline void adoptArgs(::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>> disownArgs();

  inline bool getNegated();
  inline void setNegated(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Condition::Pipeline {
public:
  typedef Condition Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Conclusion::Reader {
public:
  typedef Conclusion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPredicate() const;
  inline  ::capnp::Text::Reader getPredicate() const;

  inline bool hasArgs() const;
  inline  ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Reader getArgs() const;

  inline double getConfidence() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Conclusion::Builder {
public:
  typedef Conclusion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPredicate();
  inline  ::capnp::Text::Builder getPredicate();
  inline void setPredicate( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPredicate(unsigned int size);
  inline void adoptPredicate(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPredicate();

  inline bool hasArgs();
  inline  ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Builder getArgs();
  inline void setArgs( ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Builder initArgs(unsigned int size);
  inline void adoptArgs(::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>> disownArgs();

  inline double getConfidence();
  inline void setConfidence(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Conclusion::Pipeline {
public:
  typedef Conclusion Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Query::Reader {
public:
  typedef Query Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline  ::inference_lab::common::schemas::QueryType getType() const;

  inline bool hasGoal() const;
  inline  ::inference_lab::common::schemas::Condition::Reader getGoal() const;

  inline  ::uint32_t getMaxResults() const;

  inline  ::uint32_t getTimeoutMs() const;

  inline bool hasMetadata() const;
  inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Reader getMetadata() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Query::Builder {
public:
  typedef Query Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline  ::inference_lab::common::schemas::QueryType getType();
  inline void setType( ::inference_lab::common::schemas::QueryType value);

  inline bool hasGoal();
  inline  ::inference_lab::common::schemas::Condition::Builder getGoal();
  inline void setGoal( ::inference_lab::common::schemas::Condition::Reader value);
  inline  ::inference_lab::common::schemas::Condition::Builder initGoal();
  inline void adoptGoal(::capnp::Orphan< ::inference_lab::common::schemas::Condition>&& value);
  inline ::capnp::Orphan< ::inference_lab::common::schemas::Condition> disownGoal();

  inline  ::uint32_t getMaxResults();
  inline void setMaxResults( ::uint32_t value);

  inline  ::uint32_t getTimeoutMs();
  inline void setTimeoutMs( ::uint32_t value);

  inline bool hasMetadata();
  inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Builder getMetadata();
  inline void setMetadata( ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Builder initMetadata(unsigned int size);
  inline void adoptMetadata(::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>> disownMetadata();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Query::Pipeline {
public:
  typedef Query Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::inference_lab::common::schemas::Condition::Pipeline getGoal();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QueryResult::Reader {
public:
  typedef QueryResult Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getQueryId() const;

  inline bool getSuccess() const;

  inline bool hasResults() const;
  inline  ::capnp::List< ::inference_lab::common::schemas::Result,  ::capnp::Kind::STRUCT>::Reader getResults() const;

  inline  ::uint64_t getExecutionTimeUs() const;

  inline  ::uint64_t getInferenceSteps() const;

  inline bool hasError() const;
  inline  ::capnp::Text::Reader getError() const;

  inline bool hasMetadata() const;
  inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Reader getMetadata() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QueryResult::Builder {
public:
  typedef QueryResult Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getQueryId();
  inline void setQueryId( ::uint64_t value);

  inline bool getSuccess();
  inline void setSuccess(bool value);

  inline bool hasResults();
  inline  ::capnp::List< ::inference_lab::common::schemas::Result,  ::capnp::Kind::STRUCT>::Builder getResults();
  inline void setResults( ::capnp::List< ::inference_lab::common::schemas::Result,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::inference_lab::common::schemas::Result,  ::capnp::Kind::STRUCT>::Builder initResults(unsigned int size);
  inline void adoptResults(::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Result,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Result,  ::capnp::Kind::STRUCT>> disownResults();

  inline  ::uint64_t getExecutionTimeUs();
  inline void setExecutionTimeUs( ::uint64_t value);

  inline  ::uint64_t getInferenceSteps();
  inline void setInferenceSteps( ::uint64_t value);

  inline bool hasError();
  inline  ::capnp::Text::Builder getError();
  inline void setError( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initError(unsigned int size);
  inline void adoptError(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownError();

  inline bool hasMetadata();
  inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Builder getMetadata();
  inline void setMetadata( ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Builder initMetadata(unsigned int size);
  inline void adoptMetadata(::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>> disownMetadata();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QueryResult::Pipeline {
public:
  typedef QueryResult Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Result::Reader {
public:
  typedef Result Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFact() const;
  inline  ::inference_lab::common::schemas::Fact::Reader getFact() const;

  inline bool hasBindings() const;
  inline  ::capnp::List< ::inference_lab::common::schemas::Binding,  ::capnp::Kind::STRUCT>::Reader getBindings() const;

  inline double getConfidence() const;

  inline bool hasProof() const;
  inline  ::capnp::List< ::inference_lab::common::schemas::ProofStep,  ::capnp::Kind::STRUCT>::Reader getProof() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Result::Builder {
public:
  typedef Result Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFact();
  inline  ::inference_lab::common::schemas::Fact::Builder getFact();
  inline void setFact( ::inference_lab::common::schemas::Fact::Reader value);
  inline  ::inference_lab::common::schemas::Fact::Builder initFact();
  inline void adoptFact(::capnp::Orphan< ::inference_lab::common::schemas::Fact>&& value);
  inline ::capnp::Orphan< ::inference_lab::common::schemas::Fact> disownFact();

  inline bool hasBindings();
  inline  ::capnp::List< ::inference_lab::common::schemas::Binding,  ::capnp::Kind::STRUCT>::Builder getBindings();
  inline void setBindings( ::capnp::List< ::inference_lab::common::schemas::Binding,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::inference_lab::common::schemas::Binding,  ::capnp::Kind::STRUCT>::Builder initBindings(unsigned int size);
  inline void adoptBindings(::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Binding,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Binding,  ::capnp::Kind::STRUCT>> disownBindings();

  inline double getConfidence();
  inline void setConfidence(double value);

  inline bool hasProof();
  inline  ::capnp::List< ::inference_lab::common::schemas::ProofStep,  ::capnp::Kind::STRUCT>::Builder getProof();
  inline void setProof( ::capnp::List< ::inference_lab::common::schemas::ProofStep,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::inference_lab::common::schemas::ProofStep,  ::capnp::Kind::STRUCT>::Builder initProof(unsigned int size);
  inline void adoptProof(::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::ProofStep,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::ProofStep,  ::capnp::Kind::STRUCT>> disownProof();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Result::Pipeline {
public:
  typedef Result Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::inference_lab::common::schemas::Fact::Pipeline getFact();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Binding::Reader {
public:
  typedef Binding Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasVariable() const;
  inline  ::capnp::Text::Reader getVariable() const;

  inline bool hasValue() const;
  inline  ::inference_lab::common::schemas::Value::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Binding::Builder {
public:
  typedef Binding Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasVariable();
  inline  ::capnp::Text::Builder getVariable();
  inline void setVariable( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVariable(unsigned int size);
  inline void adoptVariable(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVariable();

  inline bool hasValue();
  inline  ::inference_lab::common::schemas::Value::Builder getValue();
  inline void setValue( ::inference_lab::common::schemas::Value::Reader value);
  inline  ::inference_lab::common::schemas::Value::Builder initValue();
  inline void adoptValue(::capnp::Orphan< ::inference_lab::common::schemas::Value>&& value);
  inline ::capnp::Orphan< ::inference_lab::common::schemas::Value> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Binding::Pipeline {
public:
  typedef Binding Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::inference_lab::common::schemas::Value::Pipeline getValue();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ProofStep::Reader {
public:
  typedef ProofStep Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getRuleId() const;

  inline bool hasRuleName() const;
  inline  ::capnp::Text::Reader getRuleName() const;

  inline bool hasMatchedFacts() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getMatchedFacts() const;

  inline bool hasDerivedFacts() const;
  inline  ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>::Reader getDerivedFacts() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ProofStep::Builder {
public:
  typedef ProofStep Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getRuleId();
  inline void setRuleId( ::uint64_t value);

  inline bool hasRuleName();
  inline  ::capnp::Text::Builder getRuleName();
  inline void setRuleName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initRuleName(unsigned int size);
  inline void adoptRuleName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownRuleName();

  inline bool hasMatchedFacts();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getMatchedFacts();
  inline void setMatchedFacts( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setMatchedFacts(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initMatchedFacts(unsigned int size);
  inline void adoptMatchedFacts(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownMatchedFacts();

  inline bool hasDerivedFacts();
  inline  ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>::Builder getDerivedFacts();
  inline void setDerivedFacts( ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>::Builder initDerivedFacts(unsigned int size);
  inline void adoptDerivedFacts(::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>> disownDerivedFacts();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ProofStep::Pipeline {
public:
  typedef ProofStep Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class KnowledgeBase::Reader {
public:
  typedef KnowledgeBase Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFacts() const;
  inline  ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>::Reader getFacts() const;

  inline bool hasRules() const;
  inline  ::capnp::List< ::inference_lab::common::schemas::Rule,  ::capnp::Kind::STRUCT>::Reader getRules() const;

  inline  ::uint64_t getVersion() const;

  inline  ::uint64_t getTimestamp() const;

  inline bool hasMetadata() const;
  inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Reader getMetadata() const;

  inline bool hasSchemaEvolution() const;
  inline  ::inference_lab::common::schemas::SchemaEvolution::Reader getSchemaEvolution() const;

  inline  ::uint32_t getDataFormatVersion() const;

  inline bool hasChecksum() const;
  inline  ::capnp::Text::Reader getChecksum() const;

  inline bool hasCompressionInfo() const;
  inline  ::inference_lab::common::schemas::CompressionInfo::Reader getCompressionInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class KnowledgeBase::Builder {
public:
  typedef KnowledgeBase Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFacts();
  inline  ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>::Builder getFacts();
  inline void setFacts( ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>::Builder initFacts(unsigned int size);
  inline void adoptFacts(::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>> disownFacts();

  inline bool hasRules();
  inline  ::capnp::List< ::inference_lab::common::schemas::Rule,  ::capnp::Kind::STRUCT>::Builder getRules();
  inline void setRules( ::capnp::List< ::inference_lab::common::schemas::Rule,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::inference_lab::common::schemas::Rule,  ::capnp::Kind::STRUCT>::Builder initRules(unsigned int size);
  inline void adoptRules(::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Rule,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Rule,  ::capnp::Kind::STRUCT>> disownRules();

  inline  ::uint64_t getVersion();
  inline void setVersion( ::uint64_t value);

  inline  ::uint64_t getTimestamp();
  inline void setTimestamp( ::uint64_t value);

  inline bool hasMetadata();
  inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Builder getMetadata();
  inline void setMetadata( ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Builder initMetadata(unsigned int size);
  inline void adoptMetadata(::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>> disownMetadata();

  inline bool hasSchemaEvolution();
  inline  ::inference_lab::common::schemas::SchemaEvolution::Builder getSchemaEvolution();
  inline void setSchemaEvolution( ::inference_lab::common::schemas::SchemaEvolution::Reader value);
  inline  ::inference_lab::common::schemas::SchemaEvolution::Builder initSchemaEvolution();
  inline void adoptSchemaEvolution(::capnp::Orphan< ::inference_lab::common::schemas::SchemaEvolution>&& value);
  inline ::capnp::Orphan< ::inference_lab::common::schemas::SchemaEvolution> disownSchemaEvolution();

  inline  ::uint32_t getDataFormatVersion();
  inline void setDataFormatVersion( ::uint32_t value);

  inline bool hasChecksum();
  inline  ::capnp::Text::Builder getChecksum();
  inline void setChecksum( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initChecksum(unsigned int size);
  inline void adoptChecksum(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownChecksum();

  inline bool hasCompressionInfo();
  inline  ::inference_lab::common::schemas::CompressionInfo::Builder getCompressionInfo();
  inline void setCompressionInfo( ::inference_lab::common::schemas::CompressionInfo::Reader value);
  inline  ::inference_lab::common::schemas::CompressionInfo::Builder initCompressionInfo();
  inline void adoptCompressionInfo(::capnp::Orphan< ::inference_lab::common::schemas::CompressionInfo>&& value);
  inline ::capnp::Orphan< ::inference_lab::common::schemas::CompressionInfo> disownCompressionInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class KnowledgeBase::Pipeline {
public:
  typedef KnowledgeBase Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::inference_lab::common::schemas::SchemaEvolution::Pipeline getSchemaEvolution();
  inline  ::inference_lab::common::schemas::CompressionInfo::Pipeline getCompressionInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CompressionInfo::Reader {
public:
  typedef CompressionInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::inference_lab::common::schemas::CompressionAlgorithm getAlgorithm() const;

  inline  ::uint64_t getOriginalSize() const;

  inline  ::uint64_t getCompressedSize() const;

  inline double getCompressionRatio() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CompressionInfo::Builder {
public:
  typedef CompressionInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::inference_lab::common::schemas::CompressionAlgorithm getAlgorithm();
  inline void setAlgorithm( ::inference_lab::common::schemas::CompressionAlgorithm value);

  inline  ::uint64_t getOriginalSize();
  inline void setOriginalSize( ::uint64_t value);

  inline  ::uint64_t getCompressedSize();
  inline void setCompressedSize( ::uint64_t value);

  inline double getCompressionRatio();
  inline void setCompressionRatio(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CompressionInfo::Pipeline {
public:
  typedef CompressionInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CompatibilityLayer::Reader {
public:
  typedef CompatibilityLayer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSourceVersion() const;
  inline  ::inference_lab::common::schemas::SchemaVersion::Reader getSourceVersion() const;

  inline bool hasTargetVersion() const;
  inline  ::inference_lab::common::schemas::SchemaVersion::Reader getTargetVersion() const;

  inline bool hasFieldMappings() const;
  inline  ::capnp::List< ::inference_lab::common::schemas::FieldMapping,  ::capnp::Kind::STRUCT>::Reader getFieldMappings() const;

  inline bool hasDefaultValues() const;
  inline  ::capnp::List< ::inference_lab::common::schemas::DefaultValue,  ::capnp::Kind::STRUCT>::Reader getDefaultValues() const;

  inline bool hasTransformationRules() const;
  inline  ::capnp::List< ::inference_lab::common::schemas::TransformationRule,  ::capnp::Kind::STRUCT>::Reader getTransformationRules() const;

  inline bool hasWarnings() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getWarnings() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CompatibilityLayer::Builder {
public:
  typedef CompatibilityLayer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSourceVersion();
  inline  ::inference_lab::common::schemas::SchemaVersion::Builder getSourceVersion();
  inline void setSourceVersion( ::inference_lab::common::schemas::SchemaVersion::Reader value);
  inline  ::inference_lab::common::schemas::SchemaVersion::Builder initSourceVersion();
  inline void adoptSourceVersion(::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion>&& value);
  inline ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion> disownSourceVersion();

  inline bool hasTargetVersion();
  inline  ::inference_lab::common::schemas::SchemaVersion::Builder getTargetVersion();
  inline void setTargetVersion( ::inference_lab::common::schemas::SchemaVersion::Reader value);
  inline  ::inference_lab::common::schemas::SchemaVersion::Builder initTargetVersion();
  inline void adoptTargetVersion(::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion>&& value);
  inline ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion> disownTargetVersion();

  inline bool hasFieldMappings();
  inline  ::capnp::List< ::inference_lab::common::schemas::FieldMapping,  ::capnp::Kind::STRUCT>::Builder getFieldMappings();
  inline void setFieldMappings( ::capnp::List< ::inference_lab::common::schemas::FieldMapping,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::inference_lab::common::schemas::FieldMapping,  ::capnp::Kind::STRUCT>::Builder initFieldMappings(unsigned int size);
  inline void adoptFieldMappings(::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::FieldMapping,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::FieldMapping,  ::capnp::Kind::STRUCT>> disownFieldMappings();

  inline bool hasDefaultValues();
  inline  ::capnp::List< ::inference_lab::common::schemas::DefaultValue,  ::capnp::Kind::STRUCT>::Builder getDefaultValues();
  inline void setDefaultValues( ::capnp::List< ::inference_lab::common::schemas::DefaultValue,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::inference_lab::common::schemas::DefaultValue,  ::capnp::Kind::STRUCT>::Builder initDefaultValues(unsigned int size);
  inline void adoptDefaultValues(::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::DefaultValue,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::DefaultValue,  ::capnp::Kind::STRUCT>> disownDefaultValues();

  inline bool hasTransformationRules();
  inline  ::capnp::List< ::inference_lab::common::schemas::TransformationRule,  ::capnp::Kind::STRUCT>::Builder getTransformationRules();
  inline void setTransformationRules( ::capnp::List< ::inference_lab::common::schemas::TransformationRule,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::inference_lab::common::schemas::TransformationRule,  ::capnp::Kind::STRUCT>::Builder initTransformationRules(unsigned int size);
  inline void adoptTransformationRules(::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::TransformationRule,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::TransformationRule,  ::capnp::Kind::STRUCT>> disownTransformationRules();

  inline bool hasWarnings();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getWarnings();
  inline void setWarnings( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setWarnings(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initWarnings(unsigned int size);
  inline void adoptWarnings(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownWarnings();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CompatibilityLayer::Pipeline {
public:
  typedef CompatibilityLayer Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::inference_lab::common::schemas::SchemaVersion::Pipeline getSourceVersion();
  inline  ::inference_lab::common::schemas::SchemaVersion::Pipeline getTargetVersion();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FieldMapping::Reader {
public:
  typedef FieldMapping Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSourceField() const;
  inline  ::capnp::Text::Reader getSourceField() const;

  inline bool hasTargetField() const;
  inline  ::capnp::Text::Reader getTargetField() const;

  inline  ::inference_lab::common::schemas::FieldMappingType getMappingType() const;

  inline bool hasTransformation() const;
  inline  ::capnp::Text::Reader getTransformation() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FieldMapping::Builder {
public:
  typedef FieldMapping Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSourceField();
  inline  ::capnp::Text::Builder getSourceField();
  inline void setSourceField( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSourceField(unsigned int size);
  inline void adoptSourceField(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSourceField();

  inline bool hasTargetField();
  inline  ::capnp::Text::Builder getTargetField();
  inline void setTargetField( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTargetField(unsigned int size);
  inline void adoptTargetField(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTargetField();

  inline  ::inference_lab::common::schemas::FieldMappingType getMappingType();
  inline void setMappingType( ::inference_lab::common::schemas::FieldMappingType value);

  inline bool hasTransformation();
  inline  ::capnp::Text::Builder getTransformation();
  inline void setTransformation( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTransformation(unsigned int size);
  inline void adoptTransformation(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTransformation();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FieldMapping::Pipeline {
public:
  typedef FieldMapping Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DefaultValue::Reader {
public:
  typedef DefaultValue Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFieldName() const;
  inline  ::capnp::Text::Reader getFieldName() const;

  inline bool hasFieldType() const;
  inline  ::capnp::Text::Reader getFieldType() const;

  inline bool hasDefaultValue() const;
  inline  ::inference_lab::common::schemas::Value::Reader getDefaultValue() const;

  inline bool hasDescription() const;
  inline  ::capnp::Text::Reader getDescription() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DefaultValue::Builder {
public:
  typedef DefaultValue Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFieldName();
  inline  ::capnp::Text::Builder getFieldName();
  inline void setFieldName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFieldName(unsigned int size);
  inline void adoptFieldName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFieldName();

  inline bool hasFieldType();
  inline  ::capnp::Text::Builder getFieldType();
  inline void setFieldType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFieldType(unsigned int size);
  inline void adoptFieldType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFieldType();

  inline bool hasDefaultValue();
  inline  ::inference_lab::common::schemas::Value::Builder getDefaultValue();
  inline void setDefaultValue( ::inference_lab::common::schemas::Value::Reader value);
  inline  ::inference_lab::common::schemas::Value::Builder initDefaultValue();
  inline void adoptDefaultValue(::capnp::Orphan< ::inference_lab::common::schemas::Value>&& value);
  inline ::capnp::Orphan< ::inference_lab::common::schemas::Value> disownDefaultValue();

  inline bool hasDescription();
  inline  ::capnp::Text::Builder getDescription();
  inline void setDescription( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDescription(unsigned int size);
  inline void adoptDescription(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDescription();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DefaultValue::Pipeline {
public:
  typedef DefaultValue Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::inference_lab::common::schemas::Value::Pipeline getDefaultValue();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TransformationRule::Reader {
public:
  typedef TransformationRule Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getRuleId() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasDescription() const;
  inline  ::capnp::Text::Reader getDescription() const;

  inline bool hasInputFields() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getInputFields() const;

  inline bool hasOutputFields() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getOutputFields() const;

  inline bool hasLogic() const;
  inline  ::capnp::Text::Reader getLogic() const;

  inline bool getReversible() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TransformationRule::Builder {
public:
  typedef TransformationRule Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getRuleId();
  inline void setRuleId( ::uint64_t value);

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasDescription();
  inline  ::capnp::Text::Builder getDescription();
  inline void setDescription( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDescription(unsigned int size);
  inline void adoptDescription(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDescription();

  inline bool hasInputFields();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getInputFields();
  inline void setInputFields( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setInputFields(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initInputFields(unsigned int size);
  inline void adoptInputFields(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownInputFields();

  inline bool hasOutputFields();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getOutputFields();
  inline void setOutputFields( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setOutputFields(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initOutputFields(unsigned int size);
  inline void adoptOutputFields(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownOutputFields();

  inline bool hasLogic();
  inline  ::capnp::Text::Builder getLogic();
  inline void setLogic( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLogic(unsigned int size);
  inline void adoptLogic(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLogic();

  inline bool getReversible();
  inline void setReversible(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TransformationRule::Pipeline {
public:
  typedef TransformationRule Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CompatibilityMatrix::Reader {
public:
  typedef CompatibilityMatrix Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCurrentVersion() const;
  inline  ::inference_lab::common::schemas::SchemaVersion::Reader getCurrentVersion() const;

  inline bool hasCompatibilityEntries() const;
  inline  ::capnp::List< ::inference_lab::common::schemas::CompatibilityEntry,  ::capnp::Kind::STRUCT>::Reader getCompatibilityEntries() const;

  inline  ::uint64_t getGeneratedAt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CompatibilityMatrix::Builder {
public:
  typedef CompatibilityMatrix Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCurrentVersion();
  inline  ::inference_lab::common::schemas::SchemaVersion::Builder getCurrentVersion();
  inline void setCurrentVersion( ::inference_lab::common::schemas::SchemaVersion::Reader value);
  inline  ::inference_lab::common::schemas::SchemaVersion::Builder initCurrentVersion();
  inline void adoptCurrentVersion(::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion>&& value);
  inline ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion> disownCurrentVersion();

  inline bool hasCompatibilityEntries();
  inline  ::capnp::List< ::inference_lab::common::schemas::CompatibilityEntry,  ::capnp::Kind::STRUCT>::Builder getCompatibilityEntries();
  inline void setCompatibilityEntries( ::capnp::List< ::inference_lab::common::schemas::CompatibilityEntry,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::inference_lab::common::schemas::CompatibilityEntry,  ::capnp::Kind::STRUCT>::Builder initCompatibilityEntries(unsigned int size);
  inline void adoptCompatibilityEntries(::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::CompatibilityEntry,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::CompatibilityEntry,  ::capnp::Kind::STRUCT>> disownCompatibilityEntries();

  inline  ::uint64_t getGeneratedAt();
  inline void setGeneratedAt( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CompatibilityMatrix::Pipeline {
public:
  typedef CompatibilityMatrix Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::inference_lab::common::schemas::SchemaVersion::Pipeline getCurrentVersion();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CompatibilityEntry::Reader {
public:
  typedef CompatibilityEntry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasVersion() const;
  inline  ::inference_lab::common::schemas::SchemaVersion::Reader getVersion() const;

  inline  ::inference_lab::common::schemas::CompatibilityLevel getCompatibility() const;

  inline bool hasMigrationPath() const;
  inline  ::inference_lab::common::schemas::MigrationPath::Reader getMigrationPath() const;

  inline bool hasNotes() const;
  inline  ::capnp::Text::Reader getNotes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CompatibilityEntry::Builder {
public:
  typedef CompatibilityEntry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasVersion();
  inline  ::inference_lab::common::schemas::SchemaVersion::Builder getVersion();
  inline void setVersion( ::inference_lab::common::schemas::SchemaVersion::Reader value);
  inline  ::inference_lab::common::schemas::SchemaVersion::Builder initVersion();
  inline void adoptVersion(::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion>&& value);
  inline ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion> disownVersion();

  inline  ::inference_lab::common::schemas::CompatibilityLevel getCompatibility();
  inline void setCompatibility( ::inference_lab::common::schemas::CompatibilityLevel value);

  inline bool hasMigrationPath();
  inline  ::inference_lab::common::schemas::MigrationPath::Builder getMigrationPath();
  inline void setMigrationPath( ::inference_lab::common::schemas::MigrationPath::Reader value);
  inline  ::inference_lab::common::schemas::MigrationPath::Builder initMigrationPath();
  inline void adoptMigrationPath(::capnp::Orphan< ::inference_lab::common::schemas::MigrationPath>&& value);
  inline ::capnp::Orphan< ::inference_lab::common::schemas::MigrationPath> disownMigrationPath();

  inline bool hasNotes();
  inline  ::capnp::Text::Builder getNotes();
  inline void setNotes( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNotes(unsigned int size);
  inline void adoptNotes(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNotes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CompatibilityEntry::Pipeline {
public:
  typedef CompatibilityEntry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::inference_lab::common::schemas::SchemaVersion::Pipeline getVersion();
  inline  ::inference_lab::common::schemas::MigrationPath::Pipeline getMigrationPath();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint32_t SchemaVersion::Reader::getMajor() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t SchemaVersion::Builder::getMajor() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SchemaVersion::Builder::setMajor( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t SchemaVersion::Reader::getMinor() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t SchemaVersion::Builder::getMinor() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SchemaVersion::Builder::setMinor( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t SchemaVersion::Reader::getPatch() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t SchemaVersion::Builder::getPatch() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SchemaVersion::Builder::setPatch( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool SchemaVersion::Reader::hasVersionString() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SchemaVersion::Builder::hasVersionString() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SchemaVersion::Reader::getVersionString() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SchemaVersion::Builder::getVersionString() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SchemaVersion::Builder::setVersionString( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SchemaVersion::Builder::initVersionString(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SchemaVersion::Builder::adoptVersionString(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SchemaVersion::Builder::disownVersionString() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t SchemaVersion::Reader::getMinCompatibleMajor() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t SchemaVersion::Builder::getMinCompatibleMajor() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void SchemaVersion::Builder::setMinCompatibleMajor( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t SchemaVersion::Reader::getMinCompatibleMinor() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t SchemaVersion::Builder::getMinCompatibleMinor() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void SchemaVersion::Builder::setMinCompatibleMinor( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool SchemaVersion::Reader::hasSchemaHash() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SchemaVersion::Builder::hasSchemaHash() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SchemaVersion::Reader::getSchemaHash() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SchemaVersion::Builder::getSchemaHash() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SchemaVersion::Builder::setSchemaHash( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SchemaVersion::Builder::initSchemaHash(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void SchemaVersion::Builder::adoptSchemaHash(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SchemaVersion::Builder::disownSchemaHash() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool SchemaEvolution::Reader::hasCurrentVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SchemaEvolution::Builder::hasCurrentVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::inference_lab::common::schemas::SchemaVersion::Reader SchemaEvolution::Reader::getCurrentVersion() const {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::inference_lab::common::schemas::SchemaVersion::Builder SchemaEvolution::Builder::getCurrentVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::inference_lab::common::schemas::SchemaVersion::Pipeline SchemaEvolution::Pipeline::getCurrentVersion() {
  return  ::inference_lab::common::schemas::SchemaVersion::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SchemaEvolution::Builder::setCurrentVersion( ::inference_lab::common::schemas::SchemaVersion::Reader value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::inference_lab::common::schemas::SchemaVersion::Builder SchemaEvolution::Builder::initCurrentVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SchemaEvolution::Builder::adoptCurrentVersion(
    ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion>&& value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion> SchemaEvolution::Builder::disownCurrentVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SchemaEvolution::Reader::hasSupportedVersions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SchemaEvolution::Builder::hasSupportedVersions() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::inference_lab::common::schemas::SchemaVersion,  ::capnp::Kind::STRUCT>::Reader SchemaEvolution::Reader::getSupportedVersions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::SchemaVersion,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::inference_lab::common::schemas::SchemaVersion,  ::capnp::Kind::STRUCT>::Builder SchemaEvolution::Builder::getSupportedVersions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::SchemaVersion,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SchemaEvolution::Builder::setSupportedVersions( ::capnp::List< ::inference_lab::common::schemas::SchemaVersion,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::SchemaVersion,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::inference_lab::common::schemas::SchemaVersion,  ::capnp::Kind::STRUCT>::Builder SchemaEvolution::Builder::initSupportedVersions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::SchemaVersion,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void SchemaEvolution::Builder::adoptSupportedVersions(
    ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::SchemaVersion,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::SchemaVersion,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::SchemaVersion,  ::capnp::Kind::STRUCT>> SchemaEvolution::Builder::disownSupportedVersions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::SchemaVersion,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool SchemaEvolution::Reader::hasMigrationPaths() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool SchemaEvolution::Builder::hasMigrationPaths() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::inference_lab::common::schemas::MigrationPath,  ::capnp::Kind::STRUCT>::Reader SchemaEvolution::Reader::getMigrationPaths() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::MigrationPath,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::inference_lab::common::schemas::MigrationPath,  ::capnp::Kind::STRUCT>::Builder SchemaEvolution::Builder::getMigrationPaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::MigrationPath,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void SchemaEvolution::Builder::setMigrationPaths( ::capnp::List< ::inference_lab::common::schemas::MigrationPath,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::MigrationPath,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::inference_lab::common::schemas::MigrationPath,  ::capnp::Kind::STRUCT>::Builder SchemaEvolution::Builder::initMigrationPaths(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::MigrationPath,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void SchemaEvolution::Builder::adoptMigrationPaths(
    ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::MigrationPath,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::MigrationPath,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::MigrationPath,  ::capnp::Kind::STRUCT>> SchemaEvolution::Builder::disownMigrationPaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::MigrationPath,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t SchemaEvolution::Reader::getEvolutionTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SchemaEvolution::Builder::getEvolutionTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SchemaEvolution::Builder::setEvolutionTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool MigrationPath::Reader::hasFromVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MigrationPath::Builder::hasFromVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::inference_lab::common::schemas::SchemaVersion::Reader MigrationPath::Reader::getFromVersion() const {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::inference_lab::common::schemas::SchemaVersion::Builder MigrationPath::Builder::getFromVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::inference_lab::common::schemas::SchemaVersion::Pipeline MigrationPath::Pipeline::getFromVersion() {
  return  ::inference_lab::common::schemas::SchemaVersion::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void MigrationPath::Builder::setFromVersion( ::inference_lab::common::schemas::SchemaVersion::Reader value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::inference_lab::common::schemas::SchemaVersion::Builder MigrationPath::Builder::initFromVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MigrationPath::Builder::adoptFromVersion(
    ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion>&& value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion> MigrationPath::Builder::disownFromVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool MigrationPath::Reader::hasToVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool MigrationPath::Builder::hasToVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::inference_lab::common::schemas::SchemaVersion::Reader MigrationPath::Reader::getToVersion() const {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::inference_lab::common::schemas::SchemaVersion::Builder MigrationPath::Builder::getToVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::inference_lab::common::schemas::SchemaVersion::Pipeline MigrationPath::Pipeline::getToVersion() {
  return  ::inference_lab::common::schemas::SchemaVersion::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void MigrationPath::Builder::setToVersion( ::inference_lab::common::schemas::SchemaVersion::Reader value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::inference_lab::common::schemas::SchemaVersion::Builder MigrationPath::Builder::initToVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void MigrationPath::Builder::adoptToVersion(
    ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion>&& value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion> MigrationPath::Builder::disownToVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::inference_lab::common::schemas::MigrationStrategy MigrationPath::Reader::getStrategy() const {
  return _reader.getDataField< ::inference_lab::common::schemas::MigrationStrategy>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::inference_lab::common::schemas::MigrationStrategy MigrationPath::Builder::getStrategy() {
  return _builder.getDataField< ::inference_lab::common::schemas::MigrationStrategy>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MigrationPath::Builder::setStrategy( ::inference_lab::common::schemas::MigrationStrategy value) {
  _builder.setDataField< ::inference_lab::common::schemas::MigrationStrategy>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool MigrationPath::Reader::getReversible() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool MigrationPath::Builder::getReversible() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void MigrationPath::Builder::setReversible(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool MigrationPath::Reader::hasDescription() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool MigrationPath::Builder::hasDescription() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader MigrationPath::Reader::getDescription() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder MigrationPath::Builder::getDescription() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void MigrationPath::Builder::setDescription( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder MigrationPath::Builder::initDescription(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void MigrationPath::Builder::adoptDescription(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> MigrationPath::Builder::disownDescription() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool MigrationPath::Reader::hasWarnings() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool MigrationPath::Builder::hasWarnings() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader MigrationPath::Reader::getWarnings() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder MigrationPath::Builder::getWarnings() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void MigrationPath::Builder::setWarnings( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void MigrationPath::Builder::setWarnings(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder MigrationPath::Builder::initWarnings(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void MigrationPath::Builder::adoptWarnings(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> MigrationPath::Builder::disownWarnings() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::inference_lab::common::schemas::Value::Which Value::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline  ::inference_lab::common::schemas::Value::Which Value::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool Value::Reader::isInt64Value() const {
  return which() == Value::INT64_VALUE;
}
inline bool Value::Builder::isInt64Value() {
  return which() == Value::INT64_VALUE;
}
inline  ::int64_t Value::Reader::getInt64Value() const {
  KJ_IREQUIRE((which() == Value::INT64_VALUE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Value::Builder::getInt64Value() {
  KJ_IREQUIRE((which() == Value::INT64_VALUE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Value::Builder::setInt64Value( ::int64_t value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::INT64_VALUE);
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Value::Reader::isFloat64Value() const {
  return which() == Value::FLOAT64_VALUE;
}
inline bool Value::Builder::isFloat64Value() {
  return which() == Value::FLOAT64_VALUE;
}
inline double Value::Reader::getFloat64Value() const {
  KJ_IREQUIRE((which() == Value::FLOAT64_VALUE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Value::Builder::getFloat64Value() {
  KJ_IREQUIRE((which() == Value::FLOAT64_VALUE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Value::Builder::setFloat64Value(double value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::FLOAT64_VALUE);
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Value::Reader::isTextValue() const {
  return which() == Value::TEXT_VALUE;
}
inline bool Value::Builder::isTextValue() {
  return which() == Value::TEXT_VALUE;
}
inline bool Value::Reader::hasTextValue() const {
  if (which() != Value::TEXT_VALUE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Value::Builder::hasTextValue() {
  if (which() != Value::TEXT_VALUE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Value::Reader::getTextValue() const {
  KJ_IREQUIRE((which() == Value::TEXT_VALUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Value::Builder::getTextValue() {
  KJ_IREQUIRE((which() == Value::TEXT_VALUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Value::Builder::setTextValue( ::capnp::Text::Reader value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::TEXT_VALUE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Value::Builder::initTextValue(unsigned int size) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::TEXT_VALUE);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Value::Builder::adoptTextValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::TEXT_VALUE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Value::Builder::disownTextValue() {
  KJ_IREQUIRE((which() == Value::TEXT_VALUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Value::Reader::isBoolValue() const {
  return which() == Value::BOOL_VALUE;
}
inline bool Value::Builder::isBoolValue() {
  return which() == Value::BOOL_VALUE;
}
inline bool Value::Reader::getBoolValue() const {
  KJ_IREQUIRE((which() == Value::BOOL_VALUE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Value::Builder::getBoolValue() {
  KJ_IREQUIRE((which() == Value::BOOL_VALUE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Value::Builder::setBoolValue(bool value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::BOOL_VALUE);
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Value::Reader::isListValue() const {
  return which() == Value::LIST_VALUE;
}
inline bool Value::Builder::isListValue() {
  return which() == Value::LIST_VALUE;
}
inline bool Value::Reader::hasListValue() const {
  if (which() != Value::LIST_VALUE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Value::Builder::hasListValue() {
  if (which() != Value::LIST_VALUE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Reader Value::Reader::getListValue() const {
  KJ_IREQUIRE((which() == Value::LIST_VALUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Builder Value::Builder::getListValue() {
  KJ_IREQUIRE((which() == Value::LIST_VALUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Value::Builder::setListValue( ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LIST_VALUE);
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Builder Value::Builder::initListValue(unsigned int size) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LIST_VALUE);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Value::Builder::adoptListValue(
    ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LIST_VALUE);
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>> Value::Builder::disownListValue() {
  KJ_IREQUIRE((which() == Value::LIST_VALUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Value::Reader::isStructValue() const {
  return which() == Value::STRUCT_VALUE;
}
inline bool Value::Builder::isStructValue() {
  return which() == Value::STRUCT_VALUE;
}
inline bool Value::Reader::hasStructValue() const {
  if (which() != Value::STRUCT_VALUE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Value::Builder::hasStructValue() {
  if (which() != Value::STRUCT_VALUE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Reader Value::Reader::getStructValue() const {
  KJ_IREQUIRE((which() == Value::STRUCT_VALUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Builder Value::Builder::getStructValue() {
  KJ_IREQUIRE((which() == Value::STRUCT_VALUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Value::Builder::setStructValue( ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::STRUCT_VALUE);
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Builder Value::Builder::initStructValue(unsigned int size) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::STRUCT_VALUE);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Value::Builder::adoptStructValue(
    ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::STRUCT_VALUE);
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>> Value::Builder::disownStructValue() {
  KJ_IREQUIRE((which() == Value::STRUCT_VALUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Field::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Field::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Field::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Field::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Field::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Field::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Field::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Field::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Field::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Field::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::inference_lab::common::schemas::Value::Reader Field::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Value>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::inference_lab::common::schemas::Value::Builder Field::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Value>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::inference_lab::common::schemas::Value::Pipeline Field::Pipeline::getValue() {
  return  ::inference_lab::common::schemas::Value::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Field::Builder::setValue( ::inference_lab::common::schemas::Value::Reader value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Value>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::inference_lab::common::schemas::Value::Builder Field::Builder::initValue() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Value>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Field::Builder::adoptValue(
    ::capnp::Orphan< ::inference_lab::common::schemas::Value>&& value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Value>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::inference_lab::common::schemas::Value> Field::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Value>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t Fact::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Fact::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Fact::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Fact::Reader::hasPredicate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Fact::Builder::hasPredicate() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Fact::Reader::getPredicate() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Fact::Builder::getPredicate() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Fact::Builder::setPredicate( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Fact::Builder::initPredicate(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Fact::Builder::adoptPredicate(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Fact::Builder::disownPredicate() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Fact::Reader::hasArgs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Fact::Builder::hasArgs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Reader Fact::Reader::getArgs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Builder Fact::Builder::getArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Fact::Builder::setArgs( ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Builder Fact::Builder::initArgs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Fact::Builder::adoptArgs(
    ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>> Fact::Builder::disownArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline double Fact::Reader::getConfidence() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}

inline double Fact::Builder::getConfidence() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}
inline void Fact::Builder::setConfidence(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 4607182418800017408ull);
}

inline  ::uint64_t Fact::Reader::getTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Fact::Builder::getTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Fact::Builder::setTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Fact::Reader::hasMetadata() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Fact::Builder::hasMetadata() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Reader Fact::Reader::getMetadata() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Builder Fact::Builder::getMetadata() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Fact::Builder::setMetadata( ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Builder Fact::Builder::initMetadata(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Fact::Builder::adoptMetadata(
    ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>> Fact::Builder::disownMetadata() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Fact::Reader::hasSchemaVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Fact::Builder::hasSchemaVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::inference_lab::common::schemas::SchemaVersion::Reader Fact::Reader::getSchemaVersion() const {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::inference_lab::common::schemas::SchemaVersion::Builder Fact::Builder::getSchemaVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::inference_lab::common::schemas::SchemaVersion::Pipeline Fact::Pipeline::getSchemaVersion() {
  return  ::inference_lab::common::schemas::SchemaVersion::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Fact::Builder::setSchemaVersion( ::inference_lab::common::schemas::SchemaVersion::Reader value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::inference_lab::common::schemas::SchemaVersion::Builder Fact::Builder::initSchemaVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Fact::Builder::adoptSchemaVersion(
    ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion>&& value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion> Fact::Builder::disownSchemaVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint64_t Rule::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Rule::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Rule::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Rule::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Rule::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Rule::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Rule::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Rule::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Rule::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Rule::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Rule::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Rule::Reader::hasConditions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Rule::Builder::hasConditions() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::inference_lab::common::schemas::Condition,  ::capnp::Kind::STRUCT>::Reader Rule::Reader::getConditions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Condition,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::inference_lab::common::schemas::Condition,  ::capnp::Kind::STRUCT>::Builder Rule::Builder::getConditions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Condition,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Rule::Builder::setConditions( ::capnp::List< ::inference_lab::common::schemas::Condition,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Condition,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::inference_lab::common::schemas::Condition,  ::capnp::Kind::STRUCT>::Builder Rule::Builder::initConditions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Condition,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Rule::Builder::adoptConditions(
    ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Condition,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Condition,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Condition,  ::capnp::Kind::STRUCT>> Rule::Builder::disownConditions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Condition,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Rule::Reader::hasConclusions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Rule::Builder::hasConclusions() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::inference_lab::common::schemas::Conclusion,  ::capnp::Kind::STRUCT>::Reader Rule::Reader::getConclusions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Conclusion,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::inference_lab::common::schemas::Conclusion,  ::capnp::Kind::STRUCT>::Builder Rule::Builder::getConclusions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Conclusion,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Rule::Builder::setConclusions( ::capnp::List< ::inference_lab::common::schemas::Conclusion,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Conclusion,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::inference_lab::common::schemas::Conclusion,  ::capnp::Kind::STRUCT>::Builder Rule::Builder::initConclusions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Conclusion,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Rule::Builder::adoptConclusions(
    ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Conclusion,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Conclusion,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Conclusion,  ::capnp::Kind::STRUCT>> Rule::Builder::disownConclusions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Conclusion,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int32_t Rule::Reader::getPriority() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Rule::Builder::getPriority() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Rule::Builder::setPriority( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double Rule::Reader::getConfidence() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}

inline double Rule::Builder::getConfidence() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}
inline void Rule::Builder::setConfidence(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value, 4607182418800017408ull);
}

inline bool Rule::Reader::hasMetadata() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Rule::Builder::hasMetadata() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Reader Rule::Reader::getMetadata() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Builder Rule::Builder::getMetadata() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Rule::Builder::setMetadata( ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Builder Rule::Builder::initMetadata(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Rule::Builder::adoptMetadata(
    ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>> Rule::Builder::disownMetadata() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Rule::Reader::hasSchemaVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Rule::Builder::hasSchemaVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::inference_lab::common::schemas::SchemaVersion::Reader Rule::Reader::getSchemaVersion() const {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::inference_lab::common::schemas::SchemaVersion::Builder Rule::Builder::getSchemaVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::inference_lab::common::schemas::SchemaVersion::Pipeline Rule::Pipeline::getSchemaVersion() {
  return  ::inference_lab::common::schemas::SchemaVersion::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Rule::Builder::setSchemaVersion( ::inference_lab::common::schemas::SchemaVersion::Reader value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::inference_lab::common::schemas::SchemaVersion::Builder Rule::Builder::initSchemaVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Rule::Builder::adoptSchemaVersion(
    ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion>&& value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion> Rule::Builder::disownSchemaVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Condition::Reader::hasPredicate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Condition::Builder::hasPredicate() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Condition::Reader::getPredicate() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Condition::Builder::getPredicate() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Condition::Builder::setPredicate( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Condition::Builder::initPredicate(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Condition::Builder::adoptPredicate(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Condition::Builder::disownPredicate() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Condition::Reader::hasArgs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Condition::Builder::hasArgs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Reader Condition::Reader::getArgs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Builder Condition::Builder::getArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Condition::Builder::setArgs( ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Builder Condition::Builder::initArgs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Condition::Builder::adoptArgs(
    ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>> Condition::Builder::disownArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Condition::Reader::getNegated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Condition::Builder::getNegated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Condition::Builder::setNegated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Conclusion::Reader::hasPredicate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Conclusion::Builder::hasPredicate() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Conclusion::Reader::getPredicate() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Conclusion::Builder::getPredicate() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Conclusion::Builder::setPredicate( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Conclusion::Builder::initPredicate(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Conclusion::Builder::adoptPredicate(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Conclusion::Builder::disownPredicate() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Conclusion::Reader::hasArgs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Conclusion::Builder::hasArgs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Reader Conclusion::Reader::getArgs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Builder Conclusion::Builder::getArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Conclusion::Builder::setArgs( ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>::Builder Conclusion::Builder::initArgs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Conclusion::Builder::adoptArgs(
    ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>> Conclusion::Builder::disownArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Value,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline double Conclusion::Reader::getConfidence() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}

inline double Conclusion::Builder::getConfidence() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}
inline void Conclusion::Builder::setConfidence(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, 4607182418800017408ull);
}

inline  ::uint64_t Query::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Query::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Query::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::inference_lab::common::schemas::QueryType Query::Reader::getType() const {
  return _reader.getDataField< ::inference_lab::common::schemas::QueryType>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::inference_lab::common::schemas::QueryType Query::Builder::getType() {
  return _builder.getDataField< ::inference_lab::common::schemas::QueryType>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Query::Builder::setType( ::inference_lab::common::schemas::QueryType value) {
  _builder.setDataField< ::inference_lab::common::schemas::QueryType>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Query::Reader::hasGoal() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Query::Builder::hasGoal() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::inference_lab::common::schemas::Condition::Reader Query::Reader::getGoal() const {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Condition>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::inference_lab::common::schemas::Condition::Builder Query::Builder::getGoal() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Condition>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::inference_lab::common::schemas::Condition::Pipeline Query::Pipeline::getGoal() {
  return  ::inference_lab::common::schemas::Condition::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Query::Builder::setGoal( ::inference_lab::common::schemas::Condition::Reader value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Condition>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::inference_lab::common::schemas::Condition::Builder Query::Builder::initGoal() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Condition>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Query::Builder::adoptGoal(
    ::capnp::Orphan< ::inference_lab::common::schemas::Condition>&& value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Condition>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::inference_lab::common::schemas::Condition> Query::Builder::disownGoal() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Condition>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t Query::Reader::getMaxResults() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 100u);
}

inline  ::uint32_t Query::Builder::getMaxResults() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 100u);
}
inline void Query::Builder::setMaxResults( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value, 100u);
}

inline  ::uint32_t Query::Reader::getTimeoutMs() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 5000u);
}

inline  ::uint32_t Query::Builder::getTimeoutMs() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 5000u);
}
inline void Query::Builder::setTimeoutMs( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value, 5000u);
}

inline bool Query::Reader::hasMetadata() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Query::Builder::hasMetadata() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Reader Query::Reader::getMetadata() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Builder Query::Builder::getMetadata() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Query::Builder::setMetadata( ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Builder Query::Builder::initMetadata(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Query::Builder::adoptMetadata(
    ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>> Query::Builder::disownMetadata() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t QueryResult::Reader::getQueryId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t QueryResult::Builder::getQueryId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void QueryResult::Builder::setQueryId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool QueryResult::Reader::getSuccess() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool QueryResult::Builder::getSuccess() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void QueryResult::Builder::setSuccess(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool QueryResult::Reader::hasResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QueryResult::Builder::hasResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::inference_lab::common::schemas::Result,  ::capnp::Kind::STRUCT>::Reader QueryResult::Reader::getResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Result,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::inference_lab::common::schemas::Result,  ::capnp::Kind::STRUCT>::Builder QueryResult::Builder::getResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Result,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QueryResult::Builder::setResults( ::capnp::List< ::inference_lab::common::schemas::Result,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Result,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::inference_lab::common::schemas::Result,  ::capnp::Kind::STRUCT>::Builder QueryResult::Builder::initResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Result,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void QueryResult::Builder::adoptResults(
    ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Result,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Result,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Result,  ::capnp::Kind::STRUCT>> QueryResult::Builder::disownResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Result,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t QueryResult::Reader::getExecutionTimeUs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t QueryResult::Builder::getExecutionTimeUs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void QueryResult::Builder::setExecutionTimeUs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t QueryResult::Reader::getInferenceSteps() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t QueryResult::Builder::getInferenceSteps() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void QueryResult::Builder::setInferenceSteps( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool QueryResult::Reader::hasError() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool QueryResult::Builder::hasError() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader QueryResult::Reader::getError() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder QueryResult::Builder::getError() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void QueryResult::Builder::setError( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder QueryResult::Builder::initError(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void QueryResult::Builder::adoptError(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> QueryResult::Builder::disownError() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool QueryResult::Reader::hasMetadata() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool QueryResult::Builder::hasMetadata() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Reader QueryResult::Reader::getMetadata() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Builder QueryResult::Builder::getMetadata() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void QueryResult::Builder::setMetadata( ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Builder QueryResult::Builder::initMetadata(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void QueryResult::Builder::adoptMetadata(
    ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>> QueryResult::Builder::disownMetadata() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Result::Reader::hasFact() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Result::Builder::hasFact() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::inference_lab::common::schemas::Fact::Reader Result::Reader::getFact() const {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Fact>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::inference_lab::common::schemas::Fact::Builder Result::Builder::getFact() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Fact>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::inference_lab::common::schemas::Fact::Pipeline Result::Pipeline::getFact() {
  return  ::inference_lab::common::schemas::Fact::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Result::Builder::setFact( ::inference_lab::common::schemas::Fact::Reader value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Fact>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::inference_lab::common::schemas::Fact::Builder Result::Builder::initFact() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Fact>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Result::Builder::adoptFact(
    ::capnp::Orphan< ::inference_lab::common::schemas::Fact>&& value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Fact>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::inference_lab::common::schemas::Fact> Result::Builder::disownFact() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Fact>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Result::Reader::hasBindings() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Result::Builder::hasBindings() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::inference_lab::common::schemas::Binding,  ::capnp::Kind::STRUCT>::Reader Result::Reader::getBindings() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Binding,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::inference_lab::common::schemas::Binding,  ::capnp::Kind::STRUCT>::Builder Result::Builder::getBindings() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Binding,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Result::Builder::setBindings( ::capnp::List< ::inference_lab::common::schemas::Binding,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Binding,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::inference_lab::common::schemas::Binding,  ::capnp::Kind::STRUCT>::Builder Result::Builder::initBindings(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Binding,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Result::Builder::adoptBindings(
    ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Binding,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Binding,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Binding,  ::capnp::Kind::STRUCT>> Result::Builder::disownBindings() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Binding,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline double Result::Reader::getConfidence() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Result::Builder::getConfidence() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Result::Builder::setConfidence(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Result::Reader::hasProof() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Result::Builder::hasProof() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::inference_lab::common::schemas::ProofStep,  ::capnp::Kind::STRUCT>::Reader Result::Reader::getProof() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::ProofStep,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::inference_lab::common::schemas::ProofStep,  ::capnp::Kind::STRUCT>::Builder Result::Builder::getProof() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::ProofStep,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Result::Builder::setProof( ::capnp::List< ::inference_lab::common::schemas::ProofStep,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::ProofStep,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::inference_lab::common::schemas::ProofStep,  ::capnp::Kind::STRUCT>::Builder Result::Builder::initProof(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::ProofStep,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Result::Builder::adoptProof(
    ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::ProofStep,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::ProofStep,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::ProofStep,  ::capnp::Kind::STRUCT>> Result::Builder::disownProof() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::ProofStep,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Binding::Reader::hasVariable() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Binding::Builder::hasVariable() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Binding::Reader::getVariable() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Binding::Builder::getVariable() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Binding::Builder::setVariable( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Binding::Builder::initVariable(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Binding::Builder::adoptVariable(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Binding::Builder::disownVariable() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Binding::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Binding::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::inference_lab::common::schemas::Value::Reader Binding::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Value>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::inference_lab::common::schemas::Value::Builder Binding::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Value>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::inference_lab::common::schemas::Value::Pipeline Binding::Pipeline::getValue() {
  return  ::inference_lab::common::schemas::Value::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Binding::Builder::setValue( ::inference_lab::common::schemas::Value::Reader value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Value>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::inference_lab::common::schemas::Value::Builder Binding::Builder::initValue() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Value>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Binding::Builder::adoptValue(
    ::capnp::Orphan< ::inference_lab::common::schemas::Value>&& value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Value>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::inference_lab::common::schemas::Value> Binding::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Value>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t ProofStep::Reader::getRuleId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProofStep::Builder::getRuleId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ProofStep::Builder::setRuleId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ProofStep::Reader::hasRuleName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ProofStep::Builder::hasRuleName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ProofStep::Reader::getRuleName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ProofStep::Builder::getRuleName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ProofStep::Builder::setRuleName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ProofStep::Builder::initRuleName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ProofStep::Builder::adoptRuleName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ProofStep::Builder::disownRuleName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ProofStep::Reader::hasMatchedFacts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ProofStep::Builder::hasMatchedFacts() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader ProofStep::Reader::getMatchedFacts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder ProofStep::Builder::getMatchedFacts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ProofStep::Builder::setMatchedFacts( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ProofStep::Builder::setMatchedFacts(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder ProofStep::Builder::initMatchedFacts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ProofStep::Builder::adoptMatchedFacts(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> ProofStep::Builder::disownMatchedFacts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ProofStep::Reader::hasDerivedFacts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ProofStep::Builder::hasDerivedFacts() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>::Reader ProofStep::Reader::getDerivedFacts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>::Builder ProofStep::Builder::getDerivedFacts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ProofStep::Builder::setDerivedFacts( ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>::Builder ProofStep::Builder::initDerivedFacts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ProofStep::Builder::adoptDerivedFacts(
    ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>> ProofStep::Builder::disownDerivedFacts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool KnowledgeBase::Reader::hasFacts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool KnowledgeBase::Builder::hasFacts() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>::Reader KnowledgeBase::Reader::getFacts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>::Builder KnowledgeBase::Builder::getFacts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void KnowledgeBase::Builder::setFacts( ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>::Builder KnowledgeBase::Builder::initFacts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void KnowledgeBase::Builder::adoptFacts(
    ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>> KnowledgeBase::Builder::disownFacts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Fact,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool KnowledgeBase::Reader::hasRules() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool KnowledgeBase::Builder::hasRules() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::inference_lab::common::schemas::Rule,  ::capnp::Kind::STRUCT>::Reader KnowledgeBase::Reader::getRules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Rule,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::inference_lab::common::schemas::Rule,  ::capnp::Kind::STRUCT>::Builder KnowledgeBase::Builder::getRules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Rule,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void KnowledgeBase::Builder::setRules( ::capnp::List< ::inference_lab::common::schemas::Rule,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Rule,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::inference_lab::common::schemas::Rule,  ::capnp::Kind::STRUCT>::Builder KnowledgeBase::Builder::initRules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Rule,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void KnowledgeBase::Builder::adoptRules(
    ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Rule,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Rule,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Rule,  ::capnp::Kind::STRUCT>> KnowledgeBase::Builder::disownRules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Rule,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t KnowledgeBase::Reader::getVersion() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t KnowledgeBase::Builder::getVersion() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void KnowledgeBase::Builder::setVersion( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t KnowledgeBase::Reader::getTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t KnowledgeBase::Builder::getTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void KnowledgeBase::Builder::setTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool KnowledgeBase::Reader::hasMetadata() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool KnowledgeBase::Builder::hasMetadata() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Reader KnowledgeBase::Reader::getMetadata() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Builder KnowledgeBase::Builder::getMetadata() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void KnowledgeBase::Builder::setMetadata( ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>::Builder KnowledgeBase::Builder::initMetadata(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void KnowledgeBase::Builder::adoptMetadata(
    ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>> KnowledgeBase::Builder::disownMetadata() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::Field,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool KnowledgeBase::Reader::hasSchemaEvolution() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool KnowledgeBase::Builder::hasSchemaEvolution() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::inference_lab::common::schemas::SchemaEvolution::Reader KnowledgeBase::Reader::getSchemaEvolution() const {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaEvolution>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::inference_lab::common::schemas::SchemaEvolution::Builder KnowledgeBase::Builder::getSchemaEvolution() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaEvolution>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::inference_lab::common::schemas::SchemaEvolution::Pipeline KnowledgeBase::Pipeline::getSchemaEvolution() {
  return  ::inference_lab::common::schemas::SchemaEvolution::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void KnowledgeBase::Builder::setSchemaEvolution( ::inference_lab::common::schemas::SchemaEvolution::Reader value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaEvolution>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::inference_lab::common::schemas::SchemaEvolution::Builder KnowledgeBase::Builder::initSchemaEvolution() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaEvolution>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void KnowledgeBase::Builder::adoptSchemaEvolution(
    ::capnp::Orphan< ::inference_lab::common::schemas::SchemaEvolution>&& value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaEvolution>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::inference_lab::common::schemas::SchemaEvolution> KnowledgeBase::Builder::disownSchemaEvolution() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaEvolution>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint32_t KnowledgeBase::Reader::getDataFormatVersion() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 1u);
}

inline  ::uint32_t KnowledgeBase::Builder::getDataFormatVersion() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 1u);
}
inline void KnowledgeBase::Builder::setDataFormatVersion( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value, 1u);
}

inline bool KnowledgeBase::Reader::hasChecksum() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool KnowledgeBase::Builder::hasChecksum() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader KnowledgeBase::Reader::getChecksum() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder KnowledgeBase::Builder::getChecksum() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void KnowledgeBase::Builder::setChecksum( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder KnowledgeBase::Builder::initChecksum(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void KnowledgeBase::Builder::adoptChecksum(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> KnowledgeBase::Builder::disownChecksum() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool KnowledgeBase::Reader::hasCompressionInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool KnowledgeBase::Builder::hasCompressionInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::inference_lab::common::schemas::CompressionInfo::Reader KnowledgeBase::Reader::getCompressionInfo() const {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::CompressionInfo>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::inference_lab::common::schemas::CompressionInfo::Builder KnowledgeBase::Builder::getCompressionInfo() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::CompressionInfo>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::inference_lab::common::schemas::CompressionInfo::Pipeline KnowledgeBase::Pipeline::getCompressionInfo() {
  return  ::inference_lab::common::schemas::CompressionInfo::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void KnowledgeBase::Builder::setCompressionInfo( ::inference_lab::common::schemas::CompressionInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::CompressionInfo>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::inference_lab::common::schemas::CompressionInfo::Builder KnowledgeBase::Builder::initCompressionInfo() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::CompressionInfo>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void KnowledgeBase::Builder::adoptCompressionInfo(
    ::capnp::Orphan< ::inference_lab::common::schemas::CompressionInfo>&& value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::CompressionInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::inference_lab::common::schemas::CompressionInfo> KnowledgeBase::Builder::disownCompressionInfo() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::CompressionInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::inference_lab::common::schemas::CompressionAlgorithm CompressionInfo::Reader::getAlgorithm() const {
  return _reader.getDataField< ::inference_lab::common::schemas::CompressionAlgorithm>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::inference_lab::common::schemas::CompressionAlgorithm CompressionInfo::Builder::getAlgorithm() {
  return _builder.getDataField< ::inference_lab::common::schemas::CompressionAlgorithm>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CompressionInfo::Builder::setAlgorithm( ::inference_lab::common::schemas::CompressionAlgorithm value) {
  _builder.setDataField< ::inference_lab::common::schemas::CompressionAlgorithm>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CompressionInfo::Reader::getOriginalSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CompressionInfo::Builder::getOriginalSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CompressionInfo::Builder::setOriginalSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CompressionInfo::Reader::getCompressedSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CompressionInfo::Builder::getCompressedSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CompressionInfo::Builder::setCompressedSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double CompressionInfo::Reader::getCompressionRatio() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double CompressionInfo::Builder::getCompressionRatio() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CompressionInfo::Builder::setCompressionRatio(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CompatibilityLayer::Reader::hasSourceVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CompatibilityLayer::Builder::hasSourceVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::inference_lab::common::schemas::SchemaVersion::Reader CompatibilityLayer::Reader::getSourceVersion() const {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::inference_lab::common::schemas::SchemaVersion::Builder CompatibilityLayer::Builder::getSourceVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::inference_lab::common::schemas::SchemaVersion::Pipeline CompatibilityLayer::Pipeline::getSourceVersion() {
  return  ::inference_lab::common::schemas::SchemaVersion::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CompatibilityLayer::Builder::setSourceVersion( ::inference_lab::common::schemas::SchemaVersion::Reader value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::inference_lab::common::schemas::SchemaVersion::Builder CompatibilityLayer::Builder::initSourceVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CompatibilityLayer::Builder::adoptSourceVersion(
    ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion>&& value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion> CompatibilityLayer::Builder::disownSourceVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CompatibilityLayer::Reader::hasTargetVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CompatibilityLayer::Builder::hasTargetVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::inference_lab::common::schemas::SchemaVersion::Reader CompatibilityLayer::Reader::getTargetVersion() const {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::inference_lab::common::schemas::SchemaVersion::Builder CompatibilityLayer::Builder::getTargetVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::inference_lab::common::schemas::SchemaVersion::Pipeline CompatibilityLayer::Pipeline::getTargetVersion() {
  return  ::inference_lab::common::schemas::SchemaVersion::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void CompatibilityLayer::Builder::setTargetVersion( ::inference_lab::common::schemas::SchemaVersion::Reader value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::inference_lab::common::schemas::SchemaVersion::Builder CompatibilityLayer::Builder::initTargetVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CompatibilityLayer::Builder::adoptTargetVersion(
    ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion>&& value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion> CompatibilityLayer::Builder::disownTargetVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CompatibilityLayer::Reader::hasFieldMappings() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CompatibilityLayer::Builder::hasFieldMappings() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::inference_lab::common::schemas::FieldMapping,  ::capnp::Kind::STRUCT>::Reader CompatibilityLayer::Reader::getFieldMappings() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::FieldMapping,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::inference_lab::common::schemas::FieldMapping,  ::capnp::Kind::STRUCT>::Builder CompatibilityLayer::Builder::getFieldMappings() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::FieldMapping,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CompatibilityLayer::Builder::setFieldMappings( ::capnp::List< ::inference_lab::common::schemas::FieldMapping,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::FieldMapping,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::inference_lab::common::schemas::FieldMapping,  ::capnp::Kind::STRUCT>::Builder CompatibilityLayer::Builder::initFieldMappings(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::FieldMapping,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CompatibilityLayer::Builder::adoptFieldMappings(
    ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::FieldMapping,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::FieldMapping,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::FieldMapping,  ::capnp::Kind::STRUCT>> CompatibilityLayer::Builder::disownFieldMappings() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::FieldMapping,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CompatibilityLayer::Reader::hasDefaultValues() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CompatibilityLayer::Builder::hasDefaultValues() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::inference_lab::common::schemas::DefaultValue,  ::capnp::Kind::STRUCT>::Reader CompatibilityLayer::Reader::getDefaultValues() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::DefaultValue,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::inference_lab::common::schemas::DefaultValue,  ::capnp::Kind::STRUCT>::Builder CompatibilityLayer::Builder::getDefaultValues() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::DefaultValue,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CompatibilityLayer::Builder::setDefaultValues( ::capnp::List< ::inference_lab::common::schemas::DefaultValue,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::DefaultValue,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::inference_lab::common::schemas::DefaultValue,  ::capnp::Kind::STRUCT>::Builder CompatibilityLayer::Builder::initDefaultValues(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::DefaultValue,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void CompatibilityLayer::Builder::adoptDefaultValues(
    ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::DefaultValue,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::DefaultValue,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::DefaultValue,  ::capnp::Kind::STRUCT>> CompatibilityLayer::Builder::disownDefaultValues() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::DefaultValue,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool CompatibilityLayer::Reader::hasTransformationRules() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool CompatibilityLayer::Builder::hasTransformationRules() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::inference_lab::common::schemas::TransformationRule,  ::capnp::Kind::STRUCT>::Reader CompatibilityLayer::Reader::getTransformationRules() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::TransformationRule,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::inference_lab::common::schemas::TransformationRule,  ::capnp::Kind::STRUCT>::Builder CompatibilityLayer::Builder::getTransformationRules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::TransformationRule,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void CompatibilityLayer::Builder::setTransformationRules( ::capnp::List< ::inference_lab::common::schemas::TransformationRule,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::TransformationRule,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::inference_lab::common::schemas::TransformationRule,  ::capnp::Kind::STRUCT>::Builder CompatibilityLayer::Builder::initTransformationRules(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::TransformationRule,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void CompatibilityLayer::Builder::adoptTransformationRules(
    ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::TransformationRule,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::TransformationRule,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::TransformationRule,  ::capnp::Kind::STRUCT>> CompatibilityLayer::Builder::disownTransformationRules() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::TransformationRule,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool CompatibilityLayer::Reader::hasWarnings() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool CompatibilityLayer::Builder::hasWarnings() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader CompatibilityLayer::Reader::getWarnings() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder CompatibilityLayer::Builder::getWarnings() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void CompatibilityLayer::Builder::setWarnings( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void CompatibilityLayer::Builder::setWarnings(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder CompatibilityLayer::Builder::initWarnings(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void CompatibilityLayer::Builder::adoptWarnings(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> CompatibilityLayer::Builder::disownWarnings() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool FieldMapping::Reader::hasSourceField() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FieldMapping::Builder::hasSourceField() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader FieldMapping::Reader::getSourceField() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder FieldMapping::Builder::getSourceField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FieldMapping::Builder::setSourceField( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder FieldMapping::Builder::initSourceField(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FieldMapping::Builder::adoptSourceField(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> FieldMapping::Builder::disownSourceField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FieldMapping::Reader::hasTargetField() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool FieldMapping::Builder::hasTargetField() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader FieldMapping::Reader::getTargetField() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder FieldMapping::Builder::getTargetField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void FieldMapping::Builder::setTargetField( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder FieldMapping::Builder::initTargetField(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void FieldMapping::Builder::adoptTargetField(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> FieldMapping::Builder::disownTargetField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::inference_lab::common::schemas::FieldMappingType FieldMapping::Reader::getMappingType() const {
  return _reader.getDataField< ::inference_lab::common::schemas::FieldMappingType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::inference_lab::common::schemas::FieldMappingType FieldMapping::Builder::getMappingType() {
  return _builder.getDataField< ::inference_lab::common::schemas::FieldMappingType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FieldMapping::Builder::setMappingType( ::inference_lab::common::schemas::FieldMappingType value) {
  _builder.setDataField< ::inference_lab::common::schemas::FieldMappingType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool FieldMapping::Reader::hasTransformation() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool FieldMapping::Builder::hasTransformation() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader FieldMapping::Reader::getTransformation() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder FieldMapping::Builder::getTransformation() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void FieldMapping::Builder::setTransformation( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder FieldMapping::Builder::initTransformation(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void FieldMapping::Builder::adoptTransformation(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> FieldMapping::Builder::disownTransformation() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool DefaultValue::Reader::hasFieldName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DefaultValue::Builder::hasFieldName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DefaultValue::Reader::getFieldName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DefaultValue::Builder::getFieldName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DefaultValue::Builder::setFieldName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DefaultValue::Builder::initFieldName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DefaultValue::Builder::adoptFieldName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DefaultValue::Builder::disownFieldName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DefaultValue::Reader::hasFieldType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DefaultValue::Builder::hasFieldType() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DefaultValue::Reader::getFieldType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DefaultValue::Builder::getFieldType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DefaultValue::Builder::setFieldType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DefaultValue::Builder::initFieldType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void DefaultValue::Builder::adoptFieldType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DefaultValue::Builder::disownFieldType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DefaultValue::Reader::hasDefaultValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DefaultValue::Builder::hasDefaultValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::inference_lab::common::schemas::Value::Reader DefaultValue::Reader::getDefaultValue() const {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Value>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::inference_lab::common::schemas::Value::Builder DefaultValue::Builder::getDefaultValue() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Value>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::inference_lab::common::schemas::Value::Pipeline DefaultValue::Pipeline::getDefaultValue() {
  return  ::inference_lab::common::schemas::Value::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void DefaultValue::Builder::setDefaultValue( ::inference_lab::common::schemas::Value::Reader value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Value>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::inference_lab::common::schemas::Value::Builder DefaultValue::Builder::initDefaultValue() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Value>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DefaultValue::Builder::adoptDefaultValue(
    ::capnp::Orphan< ::inference_lab::common::schemas::Value>&& value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Value>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::inference_lab::common::schemas::Value> DefaultValue::Builder::disownDefaultValue() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::Value>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool DefaultValue::Reader::hasDescription() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool DefaultValue::Builder::hasDescription() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DefaultValue::Reader::getDescription() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DefaultValue::Builder::getDescription() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void DefaultValue::Builder::setDescription( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DefaultValue::Builder::initDescription(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void DefaultValue::Builder::adoptDescription(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DefaultValue::Builder::disownDescription() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint64_t TransformationRule::Reader::getRuleId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TransformationRule::Builder::getRuleId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TransformationRule::Builder::setRuleId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool TransformationRule::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TransformationRule::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TransformationRule::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TransformationRule::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TransformationRule::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TransformationRule::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TransformationRule::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TransformationRule::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TransformationRule::Reader::hasDescription() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TransformationRule::Builder::hasDescription() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TransformationRule::Reader::getDescription() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TransformationRule::Builder::getDescription() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TransformationRule::Builder::setDescription( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TransformationRule::Builder::initDescription(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void TransformationRule::Builder::adoptDescription(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TransformationRule::Builder::disownDescription() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool TransformationRule::Reader::hasInputFields() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool TransformationRule::Builder::hasInputFields() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader TransformationRule::Reader::getInputFields() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder TransformationRule::Builder::getInputFields() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void TransformationRule::Builder::setInputFields( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void TransformationRule::Builder::setInputFields(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder TransformationRule::Builder::initInputFields(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void TransformationRule::Builder::adoptInputFields(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> TransformationRule::Builder::disownInputFields() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool TransformationRule::Reader::hasOutputFields() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool TransformationRule::Builder::hasOutputFields() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader TransformationRule::Reader::getOutputFields() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder TransformationRule::Builder::getOutputFields() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void TransformationRule::Builder::setOutputFields( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void TransformationRule::Builder::setOutputFields(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder TransformationRule::Builder::initOutputFields(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void TransformationRule::Builder::adoptOutputFields(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> TransformationRule::Builder::disownOutputFields() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool TransformationRule::Reader::hasLogic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool TransformationRule::Builder::hasLogic() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TransformationRule::Reader::getLogic() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TransformationRule::Builder::getLogic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void TransformationRule::Builder::setLogic( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TransformationRule::Builder::initLogic(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void TransformationRule::Builder::adoptLogic(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TransformationRule::Builder::disownLogic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool TransformationRule::Reader::getReversible() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool TransformationRule::Builder::getReversible() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void TransformationRule::Builder::setReversible(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool CompatibilityMatrix::Reader::hasCurrentVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CompatibilityMatrix::Builder::hasCurrentVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::inference_lab::common::schemas::SchemaVersion::Reader CompatibilityMatrix::Reader::getCurrentVersion() const {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::inference_lab::common::schemas::SchemaVersion::Builder CompatibilityMatrix::Builder::getCurrentVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::inference_lab::common::schemas::SchemaVersion::Pipeline CompatibilityMatrix::Pipeline::getCurrentVersion() {
  return  ::inference_lab::common::schemas::SchemaVersion::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CompatibilityMatrix::Builder::setCurrentVersion( ::inference_lab::common::schemas::SchemaVersion::Reader value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::inference_lab::common::schemas::SchemaVersion::Builder CompatibilityMatrix::Builder::initCurrentVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CompatibilityMatrix::Builder::adoptCurrentVersion(
    ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion>&& value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion> CompatibilityMatrix::Builder::disownCurrentVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CompatibilityMatrix::Reader::hasCompatibilityEntries() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CompatibilityMatrix::Builder::hasCompatibilityEntries() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::inference_lab::common::schemas::CompatibilityEntry,  ::capnp::Kind::STRUCT>::Reader CompatibilityMatrix::Reader::getCompatibilityEntries() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::CompatibilityEntry,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::inference_lab::common::schemas::CompatibilityEntry,  ::capnp::Kind::STRUCT>::Builder CompatibilityMatrix::Builder::getCompatibilityEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::CompatibilityEntry,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CompatibilityMatrix::Builder::setCompatibilityEntries( ::capnp::List< ::inference_lab::common::schemas::CompatibilityEntry,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::CompatibilityEntry,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::inference_lab::common::schemas::CompatibilityEntry,  ::capnp::Kind::STRUCT>::Builder CompatibilityMatrix::Builder::initCompatibilityEntries(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::CompatibilityEntry,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CompatibilityMatrix::Builder::adoptCompatibilityEntries(
    ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::CompatibilityEntry,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::CompatibilityEntry,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::inference_lab::common::schemas::CompatibilityEntry,  ::capnp::Kind::STRUCT>> CompatibilityMatrix::Builder::disownCompatibilityEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::inference_lab::common::schemas::CompatibilityEntry,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t CompatibilityMatrix::Reader::getGeneratedAt() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CompatibilityMatrix::Builder::getGeneratedAt() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CompatibilityMatrix::Builder::setGeneratedAt( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CompatibilityEntry::Reader::hasVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CompatibilityEntry::Builder::hasVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::inference_lab::common::schemas::SchemaVersion::Reader CompatibilityEntry::Reader::getVersion() const {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::inference_lab::common::schemas::SchemaVersion::Builder CompatibilityEntry::Builder::getVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::inference_lab::common::schemas::SchemaVersion::Pipeline CompatibilityEntry::Pipeline::getVersion() {
  return  ::inference_lab::common::schemas::SchemaVersion::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CompatibilityEntry::Builder::setVersion( ::inference_lab::common::schemas::SchemaVersion::Reader value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::inference_lab::common::schemas::SchemaVersion::Builder CompatibilityEntry::Builder::initVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CompatibilityEntry::Builder::adoptVersion(
    ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion>&& value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::inference_lab::common::schemas::SchemaVersion> CompatibilityEntry::Builder::disownVersion() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::SchemaVersion>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::inference_lab::common::schemas::CompatibilityLevel CompatibilityEntry::Reader::getCompatibility() const {
  return _reader.getDataField< ::inference_lab::common::schemas::CompatibilityLevel>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::inference_lab::common::schemas::CompatibilityLevel CompatibilityEntry::Builder::getCompatibility() {
  return _builder.getDataField< ::inference_lab::common::schemas::CompatibilityLevel>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CompatibilityEntry::Builder::setCompatibility( ::inference_lab::common::schemas::CompatibilityLevel value) {
  _builder.setDataField< ::inference_lab::common::schemas::CompatibilityLevel>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CompatibilityEntry::Reader::hasMigrationPath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CompatibilityEntry::Builder::hasMigrationPath() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::inference_lab::common::schemas::MigrationPath::Reader CompatibilityEntry::Reader::getMigrationPath() const {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::MigrationPath>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::inference_lab::common::schemas::MigrationPath::Builder CompatibilityEntry::Builder::getMigrationPath() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::MigrationPath>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::inference_lab::common::schemas::MigrationPath::Pipeline CompatibilityEntry::Pipeline::getMigrationPath() {
  return  ::inference_lab::common::schemas::MigrationPath::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void CompatibilityEntry::Builder::setMigrationPath( ::inference_lab::common::schemas::MigrationPath::Reader value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::MigrationPath>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::inference_lab::common::schemas::MigrationPath::Builder CompatibilityEntry::Builder::initMigrationPath() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::MigrationPath>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CompatibilityEntry::Builder::adoptMigrationPath(
    ::capnp::Orphan< ::inference_lab::common::schemas::MigrationPath>&& value) {
  ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::MigrationPath>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::inference_lab::common::schemas::MigrationPath> CompatibilityEntry::Builder::disownMigrationPath() {
  return ::capnp::_::PointerHelpers< ::inference_lab::common::schemas::MigrationPath>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CompatibilityEntry::Reader::hasNotes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CompatibilityEntry::Builder::hasNotes() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CompatibilityEntry::Reader::getNotes() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CompatibilityEntry::Builder::getNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CompatibilityEntry::Builder::setNotes( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CompatibilityEntry::Builder::initNotes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CompatibilityEntry::Builder::adoptNotes(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CompatibilityEntry::Builder::disownNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

